{"meta":{"title":"Gunner","subtitle":"Gunner","description":"My Tech Blog","author":"SuHawn Yun","url":"http://xyom.github.io"},"pages":[],"posts":[{"title":"Database 정규화","slug":"Database 정규화","date":"2017-12-22T10:16:19.871Z","updated":"2017-12-22T10:16:19.871Z","comments":true,"path":"2017/12/22/Database 정규화/","link":"","permalink":"http://xyom.github.io/2017/12/22/Database 정규화/","excerpt":"","text":"Database 정규화1. 데이터베이스 정규화의 목적 삽입, 삭제, 갱신의 이상 현상을 방지한다. -&gt; 이상 현상이란? 데이터의 삽입, 삭제, 갱신을 하면서 불필요한 정보가 삭제되거나 삽입되고 갱신시 일부만 변경되어 데이터의 일관성이 없어지는 현상이다. 삽입 이상: 만약 위와 같은 테이블에 이름과 학번의 정보만 넣고 싶은 경우 주소, 전공, 담당 교수에 대한 정보까지 넣어야한다. Null이 들어가게 되도 불필요한 저장공간을 차지하게 된다. 삭제 이상: 김공대 교수가 은퇴하여 김공대 교수만 삭제하고 싶어 김공대 교수를 담당 교수로 가지게 된 튜플을 삭제하게 되면 불필요한 다른 학생들의 정보까지 삭제된다. 갱신 이상: 컴퓨터공학의 담당교수를 모두 김공대 교수로 바꾸고 싶지만 일괄적으로 갱신이 되지 않을 수 있다. ​ 데이터의 중복을 최소화 한다 정보의 일관성을 보장한다. 2. 데이터 베이스 정규화 데이터베이스의 정규화에는 제1정규형~제5정규형까지 존재한다. 하지만 보통 제 3정규형까지 적용하여 데이터베이스를 설계한다. 제 1정규형 : 도메인이 원자 값 제 1정규형에서 도메인이 원자값이라는 것은 한 도메인에 알맞은 값으로 하나 존재해야 한다는 것을 뜻한다. 위와 같은 테이블에서 과목이라는 테이블을 저장하기 위해 과목 1,과목2,과목 3과 같은 컬럼이 있는 것이나 과목 이라는 컬럼에 {수학,영어,국어}와 같이 한번에 여러 값들이 들어갈 수 없고 하나의 값이 들어간다. ​ -&gt; 다음과 같이 과목이라는 컬럼에 수학,영어, 국어가 들어가게 되지만 이름,학번,학과, 학과장이 중복되게 된다. 제 2 정규형 : 완전 함수종속(부분적 함수 종속 제거) 제 1정규형을 만족하는 테이블이고 부분적 함수 종속성을 제거한다. 학번 -&gt; 이름 으로 학생을 결정할 수 있고 학번 -&gt; 학과, 학과장, 학번 -&gt; 수강과목 으로 키 값으로 결정할 수 있는 부분적 요소들이 존재하면 이를 테이블로 나눈다. ​ 테이블에서 존재하는 키값으로는 하나의 유일한 튜플을 식별할 수 있어야하며 부분적인 키값으로 식별할 수 있는 요소가 있다면 이를 나누게 된다. 위 테이블은 학번에 의해 결정되는 이름, 학과, 과목에 대한 부분적인 요소들을 테이블로 나눈 결과이다. 제 3정규형 : 이행적 함수 종속성 제거 제 3정규형은 2정규형을 만족하고 이행적 함수 종속성을 제거한다 . 이행적 함수 종속성이란 A-&gt; B 이면 B-&gt;C이게 된다는 조건을 없애는 것이다. 위의 테이블에서 학번을 알면 학과를 알 수 있고 학과를 알면 학과장을 알수 있으니 이행적 함수 종속성이 존재하게 된다. 이를 분리하여 아래와 같은 테이블 처럼 만든다. 제 4정규형: 다치 종속성 제거 제 5정규형: 조인 종속성 제거 3. 역정규화 데이터베이스의 정규화를 하게 되면 테이블이 나뉘는 경우가 많다. 이 경우 데이터의 조회는 조인을 통한 조회를 하게 되는데 방대한 양의 데이터를 조인하게 되면 시스템에 과부하가 걸릴 가능성이 높다. 이를 피하기 위해 나뉘어진 테이블을 다시 하나의 테이블로 합치는 과정이 필요하게 되는데 이를 역정규화라고 한다.","categories":[{"name":"CS","slug":"CS","permalink":"http://xyom.github.io/categories/CS/"},{"name":"Database","slug":"CS/Database","permalink":"http://xyom.github.io/categories/CS/Database/"}],"tags":[{"name":"Database","slug":"Database","permalink":"http://xyom.github.io/tags/Database/"}]},{"title":"데이터베이스 인덱스","slug":"Database Index","date":"2017-12-15T04:59:05.385Z","updated":"2017-12-15T04:59:05.385Z","comments":true,"path":"2017/12/15/Database Index/","link":"","permalink":"http://xyom.github.io/2017/12/15/Database Index/","excerpt":"","text":"Database Index1. 인덱스란?데이터베이스에서 원하는 데이터를 검색하기 위해서는 Full-Scan, 인덱스를 통한 검색이 가능하다. DB의 데이터는 삽입된 순서로 정렬되지 않은 형태로 물리적으로 저장되기 때문에 인덱스가 없을 경우 Full-Scan을 통해 자료를 찾아야 하는 비용 발생이 생긴다. n의 시간이지만 데이터가 수억 단위를 넘어가면 효율이 매우 떨어지게 된다.2. 클러스터드 인덱스 vs 넌클러스터드 인덱스- 클러스터드 인덱스 : 데이터베이스 테이블에 Only 1개만 지정될 수 있는 인덱스이다. 보통 Primary key로 지정하면 이 컬럼은 자동적으로 클러스터드 인덱스가 되어 물리적으로 자동 정렬된다.클러스터드 인덱스는 정렬되어 있기 때문에 테이블 자체가 인덱스이다.- 넌 클러스터드 인덱스 : 데이터베이스 테이블에 여러개 지정 할 수 있는 인덱스로 보통의 인덱스를 지칭한다. 일반적으로 책을 찾아볼 때 앞의 목차를 통해서 찾아가는 것과 같이 인덱스를 통해 데이터의 위치가 있는 곳을 찾아간다.3. 인덱스의 동작 과정- 데이터베이스의 테이블은 생성시 frm, myd, myi 로 나뉘어 저장되게 된다.- frm : 테이블의 구조가 저장되어 있는파일- myd : 테이블의 실제 데이터가 들어있는 파일- myi : Index 정보가 들어있는 파일 사용자가 DB에서 데이터를 찾기 위해 select * from employee where salary&gt;=3000; 이라는 쿼리를 입력했다고 하자.1. DB는 이 테이블의 myi 파일에 salary에대해 인덱스가 있는지 확인한다.2. 있을 경우 -&gt; DB의 인덱스 파일을 기준으로 데이터블록을 찾는다.없을 경우 -&gt; Full Scan을 통해 조건에 해당하는 컬럼을 모두 검색한다.4. 인덱스의 구조 이진 검색 트리 ​ B tree 인덱스는 데이터의 저장이 B-TREE라는 자료구조로 저장되어 있다. 현재는 B-TREE의 많은 부분이 보완된 B+ TREE가 사용된다. B-TREE는 Balacned Tree의 약자로서 자동으로 균형을 맞추어 검색할 수 있는 트리이다.일반적으로 트리는 검색을 위하여 균형을 맞추는 것이 중요하다. 이진 트리의 경우 일반적으로 검색 속도가 log n 의 시간복잡도를 가지지만 자식이 한쪽으로 편중된 경우 n의 시간을 갖기 때문에 검색속도에 대해서 효율을 얻을 수 없고 트리를 구성하는 비용에 대해 오히려 일반 배열보다 손해를 본다.일반적인 이진 검색 트리는 노드의 자식 수가 2개로 제한된다는 점이 있지만 B-Tree는 자식을 최대 m개 까지 가질 수 있는 m원 탐색 트리를 기반으로 설계되었고 자동으로 균형을 맞추어 준다. B-TREE -&gt; B tree 참고 인덱스는 이렇게 B-Tree의 구조로 구성되어 있어서 루트 -&gt; 브랜치 노드 브랜치 노드 -&gt; 리프 노드의 순으로 검색을 계속해 나간다. 리프노드에 다다르면 해당 key에 대한 물리 데이터의 주소가 저장되어 있어 이를 통해 데이터에 쉽게 찾아 갈 수 있다.4. 인덱스의 장단점- 인덱스의 가장 큰 장점이라고 하면 검색 속도이다. 인덱스를 구성하면 적절한 인덱스를 선택하여 검색했을 때 일반적으로 Full Scan해서 검색하는 것보다 상당히 빠른 검색효율을 보일 수 있다.- 하지만 인덱스는 검색 속도라는 장점을 가진 대신 단점도 많이 가지고 있다.1. 인덱스 파일을 구성하는데에 비용이 들고 용량을 차지 하게된다.-&gt; 실질적으로 데이터가 삽입되면 데이터에 대한 인덱스 또한 추가해주어야 하기 때문에 비용이 들고 이 인덱스 파일을 구성하는데에 용량을 차지하게 된다.#####2. DML(Insert, delete)에 약하다. -&gt;데이터 변경 작업(Insert,delete)가 자주 일어날 경우 인덱스를 재작성해야 한다.-&gt; insert는 data가 저장되어 있는 기존 블록에 여유 공간이 없는 상황에서 그 블록에 새로운 데이터가 입력되어야 할 경우 블록을 새로 할당하고 기존에 있던 블록의 key value들을 옮기는 과정들을 수행하기 때문에 매우 많은 비용을 소모하게 된다. (Index Split)-&gt; delete의 경우 데이터가 삭제되면 인덱스파일은 데이터가 삭제되지 않고 사용되지 않음으로 표시된다. 100만이었던 데이터를 지워 10만개 남았더라도 인덱스는 100만건이 존재하므로 인덱스를 사용해도 수행속도를 기대하기 힘들 수 있다.#####-&gt; update의 경우 인덱스에 update라는 개념이 없으므로 테이블에 update가 발생할 경우 인덱스에는 delete, insert 두가지 작업이 실행되므로 가장 큰 부하를 일으킨다.","categories":[{"name":"CS","slug":"CS","permalink":"http://xyom.github.io/categories/CS/"},{"name":"Database","slug":"CS/Database","permalink":"http://xyom.github.io/categories/CS/Database/"}],"tags":[{"name":"Database","slug":"Database","permalink":"http://xyom.github.io/tags/Database/"}]},{"title":"JavaScript 스코프와 클로저","slug":"Closer","date":"2017-12-10T09:30:11.762Z","updated":"2017-12-10T09:30:11.762Z","comments":true,"path":"2017/12/10/Closer/","link":"","permalink":"http://xyom.github.io/2017/12/10/Closer/","excerpt":"","text":"JavaScript 스코프 JavaScript에서 스코프란 변수가 어느 지역에서 유효한 것을 의미하는 중요한 개념이다. JavaScript는 함수를 기반으로 설계 되었기 때문에 기본적으로 함수 레벨의 스코프를 따르게 되는데 이는 C++, JAVA의 변수 유효범위와는 차이를 보인다. 123456789void getArea(bool condition,int x,int y)&#123; if(condition) &#123; int temp = 3; &#125; return temp * x * y;&#125; 123456789function getArea(condition, x, y)&#123; if(condition) &#123; var temp =3; &#125; return temp * x * y;&#125; 첫번째는 C, 두번째는 JavaScript에서의 경우의 함수이다. 위의 결과를 실행하게 된다면 C에서는 당연히 컴파일 에러가 날 것이다. 하지만 Javascript는 문제없이 실행 되고 3 x y라는 결과를 반환한다. C, Java에서는 블록에서 선언한 변수가 블록 내에서 유효한 반면 JavaScript는 함수 레벨 스코프를 가지기 때문에 if 안에서 선언한 temp 변수도 getArea라는 함수에 속하는 변수로 판단된다. 이와 같은 성질은 평소에 C나 JAVA를 해왔던 프로그래머들에게 익숙하지 않은 개념이고 ECMA6부터는 let과 const라는 블록레벨 스코프를 지원한다. let은 우리가 늘 쓰던 지역변수이고 const는 블록레벨 상수 변수이다. 실행 컨텍스트 실행 컨텍스트는 실행가능한 코드가 실행되는 환경이다. 자바스크립트 엔진은 코드를 실행하기 위해 실행에 필요한 여러가지 정보를 알고 있어야 한다. 실행에 필요한 정보는 아래와 같은 것들이 있다. 변수 : 전역 변수, 지역 변수, 매개변수, 객체의 프로퍼티 함수 선언 변수의 유효 범위 this 실행 컨텍스트는 객체와 같이 만들어져서 실행 도중 새로운 컨텍스트(함수)를 만나면 스택을 쌓아 새로운 컨텍스트를 호출한다. 이와 같이 실행 컨텍스트는 스택에 쌓여 호출 되면 쌓이고 실행이 완료되면 pop되는 구조를 가지고 있다. 실행 컨텍스트에는 객체화 하여 3가지의 프로퍼티를 소유한다. VO (변수 , 함수선언, 인자 등) Scope Chain (변수 오브젝트 + 모든 부모의 스코프) this (함수의 호출에 의해 결정되는 this) 스코프 체인 스코프 체인은 일종의 리스트로 함수의 스코프 레퍼런스를 차례로 저장하고 있는 개념이다. 즉 스코프 체인은 현재 실행 컨텍스트의 AO를 선두로 상위 컨텍스트의 AO를 모두 가르키는 레퍼런스 테이블을 만든다. 실행 컨텍스트가 전역일 경우 이는 VO는 유일한 GO(Global Ovject)를 가르키게 된다. 또한 실행 컨텍스트 중 foo()라는 함수가 만나면 스택에 실행 컨텍스트가 쌓이고 foo()의 스코프에 해당하는 변수, 함수선언들에 대한 AO를 만들게 된다. foo()의 스코프 체인은 0번째는 자신의 AO를 가르키고 그다음은 자신의 상위 부모를 가르키게 된다. (만약 부모가 여러명이라면 모든 부모를 가르킬 때 까지 스코프 체인을 이어나간다.) 클로저 클로저는 내부함수가 참조하는 외부함수의 지역변수가 외부함수에 의해 내부함수가 반환된 이후에도 life-cycle이 유지되는 것을 의미한다. 123456789function outerFunc() &#123; var x = 10; var innerFunc = function () &#123; console.log(x); &#125;; return innerFunc;&#125;// 함수 outerFunc를 호출하면 내부 함수 innerFunc가 반환된다. 그리고 함수 outerFunc의 실행 컨텍스트는 소멸한다var inner = outerFunc();inner(); 위의 코드에서 outerFunc()을 호출하여 innerFunc을 받아 전역 변수 inner에 저장하고 inner를 실행한다. 그렇다면 cosole.log(x)에 x가 찍힐까? -&gt; 그렇다 자바 스크립트는 함수 레벨 스코프를 가진다면서 왜 x의 값은 사라지지 않고 내부함수가 이를 참조하여 출력할 수 있을까? 이를 이해하려면 위에서의 실행컨텍스트를 이해하고 있어야 한다. 위의 실행 컨텍스트에서 보면 이를 이해할 수 있다. outerFunc()은 실행 후 실행 컨텍스트에서 종료되어 그 실행 컨텍스트는 없어진다. 하지만 inner function의 스코프 체인이 outerFunc()의 AO를 가르키고 있어 AO 내부의 변수 x에 참조가 가능한 것이다. -&gt; 다시 말하면 실행 컨텍스트는 사라져도 AO는 바로 사라지지 않는다. 자신을 참조하고 있는 개체가 하나이상이라면 AO는 가비지 콜렉터에 의해 소멸되지 않는다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://xyom.github.io/categories/Programming/"},{"name":"JavaScript","slug":"Programming/JavaScript","permalink":"http://xyom.github.io/categories/Programming/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://xyom.github.io/tags/JavaScript/"}]},{"title":"Node js request와 cheerio","slug":"Request와 Cheerio","date":"2017-12-10T08:50:21.547Z","updated":"2017-12-10T08:50:21.547Z","comments":true,"path":"2017/12/10/Request와 Cheerio/","link":"","permalink":"http://xyom.github.io/2017/12/10/Request와 Cheerio/","excerpt":"","text":"Request Node js에는 Request라는 모듈이 있어 아주 간단하게 http 요청을 보낼 수 있다. 기본적으로 Node js가 제공하는 http 모듈을 더욱 사용하기 쉽게 만들어 더욱 짧은 줄로 간단하게 http 요청을 보낼 수 있다. 1npm install --save request 먼저 request모듈을 사용하기 위해 npm을 통해 request 모듈을 설치한다. 123456789var request = require('request');var url = 'http://www.google.com';request(url,function(err,res,body)&#123; if(!err &amp;&amp; res.statusCode == 200) console.log(body);&#125;); 기본적으로 get 방식을 통하여 url에 접근하여 응답을 받고 html요소를 log에 출력하는 코드이다. 위와 같은 코드를 실행하게 된다면 예외가 없고 성공적으로 200 코드를 받았을 경우 html을 출력한다. 또한 request.Method() // GET // POST // PUT // DELETE 와 같은 함수를 통해 손쉽게 Rest Api를 호출 할 수 있고 option 객체를 만들어 파라미터에 넘겨 주는 것으로 명시적으로 header, method, data 등을 설정 가능하다. 1234567891011var option = &#123; uri: url, method: 'POST', json: &#123; 'data': data &#125; &#125;;request(option,function(err,res,body)&#123;&#125;); 위와 같은 방법으로 옵션 객체를 만들고 거기에 특정 필드 부분을 추가하여 여러가지 옵션들을 바꿀 수 있다. 이 외에도 file의 stream을 열어 multipart로 전송하여 upload하는 방법도 사용할 수 있는데 이러한 부분은 모두 추상화되어 있는 다른 모듈을 사용하도록 하자 (Multer). Cheerio Request로 Html 형식의 텍스트를 받아왔다면 이를 파싱할 파서가 필요하다. Node js 에는 Cheerio라는 모듈이 존재해서 아주 간단하고 다양한 방법으로 DOM의 Element에 접근할 수 있다. 1npm install --save cheerio 1234567891011var cheerio = request('cheerio');request(url,function(err, res, body)&#123; var $ = cheerio.load(body); var tbody = $('table tbody'); tbody.children().first().text('첫번째 자식'); tbody.childeren().first().next().append('&lt;li class=\"apple\" &gt; Apple&lt;/li&gt;');&#125;); 위의 코드로 cheerio로 모듈을 가져오고 jquery 방식처럼 간편히 접근할 수 있도록 $에 body를 load한 개체를 담는다. 그 후에는 jquery와 비슷한 방식으로 css selector 방식으로 손쉽게 접근 가능하다. ‘table tbody’와 같이 접근했다면 table이라는 element 요소의 밑에 있는 tbody element를 모두 가져와 tbody에 담는다. 위와 같이 element를 지정하는 것이 아니라 class 접근자 . id 접근자 # 모두 사용 가능하다. 위와 같이 조작할 element요소를 찾았다면 그 요소에 대한 속성, 텍스트 값 등을 모두 조작 가능하다. children() -&gt; 현재 요소 밑에 모든 자식들을 찾아준다. first() -&gt; 요소들 중에 가장 첫번째 요소를 찾아준다. text -&gt; text를 얻어오거나 text를 set 한다. -&gt; text안에 value를 넣어주면 set 되고 넣지 않으면 get할 수 있다. next() -&gt; 현재 요소의 다음 형제 요소를 찾는다. append() -&gt; 현재 요소의 자식을 하나 추가한다. ####사이트 : cheerio GitHub","categories":[{"name":"Programming","slug":"Programming","permalink":"http://xyom.github.io/categories/Programming/"},{"name":"Node js","slug":"Programming/Node-js","permalink":"http://xyom.github.io/categories/Programming/Node-js/"}],"tags":[{"name":"Node js","slug":"Node-js","permalink":"http://xyom.github.io/tags/Node-js/"}]},{"title":"프로젝트 관련 질문","slug":"면접( 프로젝트 관련 질문)","date":"2017-12-08T08:47:39.918Z","updated":"2017-12-08T08:47:39.918Z","comments":true,"path":"2017/12/08/면접( 프로젝트 관련 질문)/","link":"","permalink":"http://xyom.github.io/2017/12/08/면접( 프로젝트 관련 질문)/","excerpt":"","text":"프로젝트 관련 질문**만약 해보지 않았던 거라도 지금 내가 알고있는 것으로 지금이라면 어떻게 하겠다고 이야기 하기. 왜 Node js를 사용하였나?? -&gt; 과거에는 각 api를 하나의 jsp 파일로 만들어서 처리하였다. 이는 매우 불편하고 생산성이 떨어졌고 Node js를 사용하면서 생산성이 많이 향상되었다. 또 npm으로 모듈을 쉽게 관리할 수 있었고 single thread에서 비동기 이벤트 방식으로 동작하기 때문에 멀티 쓰레드에서의 복잡한 동기 문제에 대해 덜 신경쓸 수 있었다. -&gt; Node js는 Cpu Bound 작업에 약하다. single thread가 모두 처리하기 때문에 한 작업이 길어질 경우 다른 작업을 처리하지 못해 반환 시간이 길어지게 된다. -&gt; 작업을 나누어 setTimeout을 통해 일정시간 뒤에 작업을 넣는 방식으로 처리하면 이런 문제를 극복할 수 있다. ​ 비동기 처리를 하다보면 Callback hell 문제가 발생할 수 있는데 이를 어떻게 해결할 수 있나?? 프로젝트 당시 이 문제를 만났을 때는 waterfall이라는 라이브러리를 사용하였고 이는 내부적으로 promise로 구현된 것으로 알고 있다. ​ *서비스 규모가 커질 경우에 대해 생각해보았나 -&gt; 서비스 규모가 커지면 요청이 많이 발생해서 Cpu 사용량도 증가하고 DB나 네트워크 I/O도 매우 커질 것이다. 서버가 많은 요구 사항을 처리하다 보면 에러가 일어날 수 있기 때문에 이 일련의 과정을 트랜잭션으로 처리하는 것은 필수 인 것 같다. 그리고 서버 작업을 하면서 Node js로 프로그래밍 하다보니 AWS 상에서 작업해야 할 경우가 많이 생겼다. 단순히 Putty에서 vi를 통해 코딩하는 것은 어려움이 있어서 WebStorm을 이용하여 sftp로 원격접속하여 편집하였다. 팀 프로젝트를 하면서 어려웠던 점이 없었나? -&gt; 서버 개발, 클라이언트 개발을 나누어 하다보니 api의 요청 값과 응답 값들에 대해서 서로 맞추는게 어려웠다. 그래서 PostMan을 이용해서 작성한뒤 문서를 공유했다. TCP/UDP -&gt; TCP는 신뢰성, UDP는 비신뢰성, TCP는 신뢰성 있는 통신을 하기 위해서 handshaking과 흐름제어 , 오류제어를 한다. 그리고 TCP는 네트워크의 과부하를 막기 위해서 혼잡제어도 사용한다.","categories":[{"name":"InterView","slug":"InterView","permalink":"http://xyom.github.io/categories/InterView/"}],"tags":[{"name":"InterView","slug":"InterView","permalink":"http://xyom.github.io/tags/InterView/"}]},{"title":"Node js 동작 원리","slug":"Node js 동작 원리","date":"2017-12-08T08:47:39.898Z","updated":"2017-12-08T08:47:39.898Z","comments":true,"path":"2017/12/08/Node js 동작 원리/","link":"","permalink":"http://xyom.github.io/2017/12/08/Node js 동작 원리/","excerpt":"","text":"Node js 동작 원리 Index1. Node js 란?2. Node js 동작 원리 1. Node js란?Node js 는 구글의 크롬 V8 자바스크립트 엔진을 기반으로 한 고성능 네트워크 서버이다. Single Thread 기반의 Event Loop를 기반으로 하고 있으며 File, Network 등에 대해서 비동기 IO 처리를 하는 서버 미들웨어이다. 또한 Single Thread 이벤트 기반이기 때문에 Multi Thread 프로그래밍에서의 가장 큰 문제점인 자원에 대한 동시접근 문제가 발생하지는 않는다. -&gt; 자원의 접근 순서는 보장할 수 없다.Node js가 Single Thread 기반이기 때문에 Spring과 같은 Multi Thread 방식을 채택하는 서버 프레임워크보다 Context Switching이 적어 빠르다는 것은 맞지 않는 말이라고 한다.Node js 또한 I/O처리에서 내부적으로는 libio의 Thread Pool에 의해 동작하기 때문에 Node js 또한 Disk , DB 접근이 많은 작업에 대해서는 유리하지 않으며 오히려 Servlet이 빠르다고 한다. -&gt; Node js는 I/O 작업이 적은 메시징 작업에서 유리하다.Node js는 JavaScript를 기반으로 하기 때문에 프론트 개발자가 서버까지 개발할 수 있다는 장점과 JSON 사용, npm을 통한 모듈 관리등을 장점으로 하기 때문에 생산성에 대한 부분에서도 상당히 높다.또한 현재 Http 통신에 있어서 JSON 형식을 사용한 데이터 전송이 많아지고 있는데 Node js를 사용하게 되면 이 부분에 대한 코드의 양도 적어지고 다루기가 쉬워진다.Node js가 인기 있는 이유는 수준 높은 실력을 필요로 하던 백엔드 개발에 대해 진입장벽을 낮추어 프론트 엔트의 개발자 또한 빠르게 개발할 수 있다는 것이다. 그리고 node js의 모듈중의 하나인 socket.io는 HTML5의 WebSocket의 단점을 보완해 준다.HTML 5의 웹소켓이 좋은 기술이지만 웹소켓은 브라우져 호환성의 문제가 있다. Socket.io는 웹소켓을 포함해 롱 폴링, 스트림 등의 방식을 모두 추상화 하였기 때문에 브라우져에 상관없이 Socket.io를 통해 푸쉬를 구현할 수 있게 해준다.Node js는 단점 또한 가지고 있는데 하나의 작업 자체가 시간이 많이 걸리면 전체 시스템의 성능이 아주 급격하게 떨어진다. 그래서 CPU bound가 낮은 작업 위주로 개발이 되어야 한다. -&gt; 만약 많은 CPU bound를 가지는 작업이 생긴다면 이를 분할하여 SetTimeOut() 함수 호출을 통해 이벤트 큐에 분할로 넣어주는 방식으로 처리할 수 있다.또한 Node js는 비동기 처리를 기본으로 하기 때문에 여기서 오는 Callback 함수의 중첩(Callback hell) 에 대한 문제도 생긴다. -&gt; waterfall과 같은 라이브러리를 사용해 어느정도 해결할 수 있다.####### 원문 http://bcho.tistory.com/876 2. Node js 동작 원리 Node Js는 기본적으로 V8엔진을 통해 Single Thread로 동작하게 된다. 하지만 Node js의 특성상 비동기식 I/O를 채택하고 있기 때문에 어떠한 I/O가 발생하게 되면 libio의 ThreadPool에 작업을 전달하게 되고 I/O가 완료되게 되면 EventQueue에 CallBack 함수가 쌓이게 된다.1234connection.query('insert into table values('2','3')', function(result,err)&#123; console.log(result);&#125;); 만약 위와 같이 DB Connection을 통해 DB에 쿼리를 날리는 경우가 발생하면 ‘insert ‘문에 대한 DB IO가 발생하게 된다. Node js는 이 작업에 대해 완료될 때 까지 기다리지 않고 다른 작업을 처리하고 있다가 I/O가 완료되면 callback 함수를 EventQueue에 집어 넣는다. EventLoop는 항상 돌고 있다가 V8 엔진의 호출스택이 모두 종료(모든 작업을 실행하고 남아 있는 작업이 없을 경우) EventQueue에서 작업을 꺼내어 처리하게 된다.또한 Node js가 ThreadPool을 사용하는 이유중에 하나는 시스템에서 Non blocking을 지원하지 않아 Blocking이 발생하는 함수에 대해 호출이 일어났을 경우 이를 Thread에 할당해 처리한뒤 i/o작업이끝나면 callback을 리턴해주어 non blocking처럼 작동할 수 있도록 한다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://xyom.github.io/categories/Programming/"},{"name":"Node js","slug":"Programming/Node-js","permalink":"http://xyom.github.io/categories/Programming/Node-js/"}],"tags":[{"name":"Node js","slug":"Node-js","permalink":"http://xyom.github.io/tags/Node-js/"}]},{"title":"Multer를 이용한 파일 올리기","slug":"Multer를 이용한 파일 올리기","date":"2017-12-08T08:47:39.882Z","updated":"2017-12-08T08:47:39.882Z","comments":true,"path":"2017/12/08/Multer를 이용한 파일 올리기/","link":"","permalink":"http://xyom.github.io/2017/12/08/Multer를 이용한 파일 올리기/","excerpt":"","text":"Multer를 이용한 파일 올리기프로젝트 모듈에 multer를 추가한다. 1npm install --save multer Node의 해당 프로젝트로 이동하여 위의 명령어를 입력하고 multer 모듈을 설치한다. 2. 서버의 요청에 사용할 Api를 만든다.12345678910111213141516171819202122232425var express = require(&apos;express&apos;);var multer = require(&apos;multer&apos;);var router = express.Router();var path = require(&apos;path&apos;);const upload = multer(&#123;storage : multer.diskStorage(&#123; destination: function(req,file,cb) &#123; cb(null,&apos;../../static/images/&apos;); &#125;, filename: function(req,file,cb) &#123; cb(null,new Date().valueOf() + path.extname(file.originalname)); &#125;&#125;),&#125;);router.post(&apos;/up&apos;,upload.single(&apos;img&apos;),function(req,res,err)&#123; var originalPath = &apos;yourUrl/images/&apos;; var filename = originalPath + req.file.filename; res.status(200).json(&#123; result : &apos;success&apos;, path : filename &#125;);&#125;); 서버로 요청할 api를 만들어 받은 요청에 대해 multer를 이용하여 이미지를 저장하고 저장된 경로를 반환 해주도록 한다. 라우터에 post 방식으로 up이라는 요청이 들어왔을 경우 upload.single()에 의해 하나의 파일만 받아 저장하게 된다. 여러개를 저장할 경우 upload.array()를 통해 받을 수 있다, 또한 필드명 별로 여러개의 사진을 받을 경우 .fields 메서드를 이용한다. cont upload에는 multer가 저장할 저장 위치를 정해준다. 위에서 multer가 저장할 저장 위치와 파일명에 대해서 명시적으로 지정해주는 것은 multer에 의해 확장자가 자동으로 제거된 이름으로 명명되는 것을 임의로 설정해 주는 것이다. 1const upload = multer(&#123;dest : &apos;images&apos;&#125;); 만약 multer의 파라미터에 간단하게 dest만 넣어주게 되면 multer를 통해 저장된 파일의 이름이 0ax5e4f725… 과같은 문자로 바뀌어 반환되게 된다. 또한 확장자 까지 제거된 상태로 파일이 저장되므로 static 서버에 저장한뒤 단순히 자원의 이름으로만 접근하게 되면 이미지 파일이 바로 보이지 않고 확장자 없는 파일이 다운된다. 3. Client에서의 요청123456789101112131415161718192021$.ajax(&#123; url : uploadURL, type : &quot;POST&quot;, contentType : false, processData : false, cache : false, data : formData, success: function(data) &#123; status.setUrlName(data.path); console.log(data); &#125;, error:function(request, status, error) &#123; console.log(error); &#125; &#125; ); Client에서의 요청은 위와 같이 ajax를 이용해 요청 하였다. 서버에서의 방식과 마찬가지로 POST로 맞춰주고 data: 항목에는 전송할 데이터 파일의 form형 데이터를 넣는다. 12var formData = new FormData();fd.append(&apos;img&apos;, 파일 객체); formData는 위와 같이 formData에 필드명과 함께 파일객체를 넣어주어 ajax로 요청하게 된다. 이와 같은 작업을 같은 도메인 내에서 한다면 문제가 발생하지 않지만 원격으로 떨어진 서버로 요청을 보내게 될 경우 Same-Origin Policy 문제가 발생한다. Cross-Domain 문제는 ajax의 요청을 같은 도메인이 아닌 다른 도메인을 가진 서버로 요청을 보내는 경우에 제약이 걸리는 것이다. (보안적인 문제를 위해 막았다고 한다.) 위 문제에 대해 Jsonp를 이용해 해결할 수 있는데 Jsonp는 script 요소로 요청되는 호출이 보안 정책에 적용되지 않는점을 이용한 것이라고 한다. 서버측에서 해결하는 방법으로는 서버측에서 Cross Domain을 허용해 주면 된다. -&gt; Node js에서는 cors 모듈을 통해 아주 간단하게 해결 할 수 있다. 1npm install --save cors 모듈을 설치하고 123456var cors = require(&apos;cors&apos;);...app.use(cors()); 를 해주면 문제가 해결된다. 웹 쪽 클라이언트를 많이 다루어 보지 않았지만 웹에서는 이러한 문제가 발생할 수 있다는 것을 알고 넘어가도록 해야겠다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://xyom.github.io/categories/Programming/"},{"name":"Node js","slug":"Programming/Node-js","permalink":"http://xyom.github.io/categories/Programming/Node-js/"}],"tags":[{"name":"Node js","slug":"Node-js","permalink":"http://xyom.github.io/tags/Node-js/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-12-08T08:23:44.171Z","updated":"2017-12-08T08:23:44.171Z","comments":true,"path":"2017/12/08/hello-world/","link":"","permalink":"http://xyom.github.io/2017/12/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}